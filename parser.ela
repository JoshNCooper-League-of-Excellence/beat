import ast::*;
import arena::*;

Parser :: struct {
  arena: Arena,
  scope: *mut Scope,
}

impl Parser {
  new :: fn() -> #self {
    return .{
      arena: Arena::new(8192, ArenaFlags::Align),
      scope: new(Scope.{}),
    };
  }

  new_node :: fn(*mut self, node: Node) -> *mut Node {
    mem : *mut Node = self.arena.allocate(sizeof(Node));
    *mem = node;
    return mem;
  }

  parse_primary :: fn(*mut self, lexer: *mut Lexer) -> *mut Node {
    token := lexer.peek();
    switch token.type {
      TType::OpenCurly: {
        lexer.eat();
        mut values: Map!<String, *mut Node>;
        while lexer.peek().type != TType::CloseCurly {
          name := lexer.expect(TType::Identifier).unwrap().value.unwrap();
          lexer.expect(TType::Assign).unwrap();
          values.insert(name, self.parse_expression(lexer));
          if lexer.peek().type != TType::CloseCurly {
            lexer.expect(TType::Comma).unwrap();
          }
        }
        lexer.expect(TType::CloseCurly).unwrap();
        return self.new_node(.{
          tag: NodeTag::ObjectLiteral,
          object_literal: .{
            key_values: values,
          }
        });
      }
      TType::OpenBracket: {
        lexer.eat();
        mut values: List!<*mut Node>;
        while lexer.peek().type != TType::CloseBracket {
          values.push(self.parse_expression(lexer));
          if lexer.peek().type != TType::CloseBracket {
            lexer.expect(TType::Comma).unwrap();
          }
        }
        lexer.expect(TType::CloseBracket).unwrap();
        return self.new_node(.{
          tag: NodeTag::ArrayLiteral,
          array_literal: .{
            values: values,
          }
        });
      }
      TType::Number: {
        lexer.eat();
        return self.new_node(.{
          tag: NodeTag::Number,
          number: atof(token.value.unwrap().data),
        });
      }
      TType::True: {
        lexer.eat();
        return self.new_node(.{
          tag: NodeTag::Boolean,
          boolean: true,
        });
      }
      TType::None: {
        lexer.eat();
        return self.new_node(.{
          tag: NodeTag::None,
        });
      }
      TType::False: {
        lexer.eat();
        return self.new_node(.{
          tag: NodeTag::Boolean,
          boolean: false,
        });
      }
      TType::String: {
        lexer.eat();
        return self.new_node(.{
          tag: NodeTag::String,
          string: token.value.unwrap(),
        });
      }
      TType::Identifier: {
        lexer.eat();
        return self.new_node(.{
          tag: NodeTag::Identifier,
          identifier: token.value.unwrap(),
        });
      }
      else: {
        panic("invalid primary expression");
      }
    }
    return null;
  }

  parse_postfix :: fn(*mut self, lexer: *mut Lexer) -> *mut Node {
    mut node := self.parse_primary(lexer);
    while {
      token := lexer.peek();
      switch token.type {
        TType::OpenParen: {
          lexer.eat();
          mut arguments: List!<*mut Node>;

          if lexer.peek().type != TType::CloseParen {
            while {
              arguments.push(self.parse_expression(lexer));
              if lexer.peek().type == TType::CloseParen {
                break;
              }
              lexer.expect(TType::Comma);
            }
          }

          lexer.expect(TType::CloseParen);

          node = self.new_node(.{
            tag: NodeTag::Call,
            call: .{
              callee: node,
              arguments: arguments,
            },
          });
        }
        TType::OpenBracket: {
          lexer.eat();
          index := self.parse_expression(lexer);
          lexer.expect(TType::CloseBracket).unwrap();
          node = self.new_node(.{
            tag: NodeTag::Subscript,
            subscript: .{
              base: node,
              index: index,
            },
          });
        }
        TType::Dot: {
          lexer.eat();
          member := lexer.expect(TType::Identifier).unwrap().value.unwrap();
          node = self.new_node(.{
            tag: NodeTag::MemberAccess,
            member_access: .{
              base: node,
              member: member,
            },
          });
        }
        else: { break; }
      }
    }
    return node;
  }

  parse_unary :: fn(*mut self, lexer: *mut Lexer) -> *mut Node {
    token := lexer.peek();
    if token.type == TType::Not || token.type == TType::Sub {
      lexer.eat();
      operand := self.parse_postfix(lexer);
      return self.new_node(.{
        tag: NodeTag::Unary,
        unary: .{
          operand: operand,
          operator: token.type,
        },
      });
    }
    return self.parse_postfix(lexer);
  }

  parse_binary :: fn(*mut self, lexer: *mut Lexer, mut left: *mut Node, precedence: Precedence) -> *mut Node {
    while {
      token := lexer.peek();
      token_precedence := Precedence::get(token.type);
      if token_precedence <= precedence then break;

      lexer.eat();
      right := self.parse_expression_impl(lexer, token_precedence);
      node := Node.{
        tag: NodeTag::Binary,
        binary: .{
          left: left,
          right: right,
          operator: token.type,
        },
      };
      left = self.new_node(node);
    }
    return left;
  }

  parse_expression_impl :: fn(*mut self, lexer: *mut Lexer, precedence: Precedence) -> *mut Node {
    left := self.parse_unary(lexer);
    return self.parse_binary(lexer, left, precedence);
  }

  parse_expression :: fn(*mut self, lexer: *mut Lexer) -> *mut Node {
    return self.parse_expression_impl(lexer, Precedence::Lowest);
  }

  parse_variable :: fn(*mut self, lexer: *mut Lexer) -> *mut Node {
    lexer.expect(TType::Var).unwrap();
    name := lexer.expect(TType::Identifier).unwrap().value.unwrap();

    if lexer.peek().type == TType::Semi {
      lexer.eat();
      return self.new_node(.{
        tag: NodeTag::Variable,
        variable: .{
          name: name,
          value: None(),
        }
      });
    } else {
      lexer.expect(TType::Assign).unwrap();
      value := Some(self.parse_expression(lexer));
      lexer.expect(TType::Semi).unwrap();
      return self.new_node(.{
        tag: NodeTag::Variable,
        variable: .{
          name: name,
          value: value,
        }
      });
    }
  }

  parse_if :: fn(*mut self, lexer: *mut Lexer) -> *mut Node {
    lexer.expect(TType::If).unwrap();
    condition := self.parse_expression(lexer);
    block := self.parse_block(lexer);

    mut else_node: Option!<*mut Node> = None();
    if lexer.peek().type == TType::Else {
      else_node = Some(self.parse_else(lexer));
    }

    return self.new_node(.{
      tag: NodeTag::If,
      if_node: .{
        condition: condition,
        block: block,
        else_node: else_node
      }
    });
  }

  parse_else :: fn(*mut self, lexer: *mut Lexer) -> *mut Node {
    lexer.expect(TType::Else).unwrap();

    if lexer.peek().type == TType::If {
      if_node := Some(self.parse_if(lexer));
      return self.new_node(.{
        tag: NodeTag::Else,
        else_node: .{
          if_node: if_node,
        }
      });
    } else {
      block := Some(self.parse_block(lexer));
      return self.new_node(.{
        tag: NodeTag::Else,
        else_node: .{
          block: block,
        }
      });
    }
  }

  parse_while :: fn(*mut self, lexer: *mut Lexer) -> *mut Node {
    lexer.expect(TType::While).unwrap();
    mut condition: Option!<*mut Node> = None();
    if lexer.peek().type != TType::OpenCurly {
      condition = Some(self.parse_expression(lexer));
    }
    block := self.parse_block(lexer);
    return self.new_node(.{
      tag: NodeTag::While,
      while_node: .{
        condition: condition,
        block: block
      }
    });
  }

  parse_for :: fn(*mut self, lexer: *mut Lexer) -> *mut Node {
    lexer.expect(TType::For).unwrap();
    identifier := lexer.expect(TType::Identifier).unwrap().value.unwrap();
    lexer.expect(TType::In).unwrap();
    target := self.parse_expression(lexer);
    block := self.parse_block(lexer);

    return self.new_node(.{
      tag: NodeTag::For,
      for_node: .{
        identifier: identifier,
        target: target,
        block: block
      }
    });
  }

  parse_block :: fn(*mut self, lexer: *mut Lexer) -> *mut Node {
    lexer.expect(TType::OpenCurly).unwrap();

    mut statements: List!<*mut Node>;

    scope := self.scope.create_child();
    old_scope := self.scope;
    self.scope = scope;

    defer {
      self.scope = old_scope;
    }

    while lexer.peek().type != TType::CloseCurly {
      statements.push(self.parse_statement(lexer));
    }

    lexer.expect(TType::CloseCurly).unwrap();

    return self.new_node(.{
      tag: NodeTag::Block,
      block: .{
        statements: statements,
        scope: scope,
      }
    });
  }

  parse_function :: fn(*mut self, lexer: *mut Lexer) -> *mut Node {
    lexer.expect(TType::Fn).unwrap();
    name := lexer.expect(TType::Identifier).unwrap().value.unwrap();
    lexer.expect(TType::OpenParen).unwrap();
    mut parameters: List!<String>;
    if lexer.peek().type != TType::CloseParen {
      while {
        parameters.push(lexer.expect(TType::Identifier).unwrap().value.unwrap());
        if lexer.peek().type == TType::CloseParen {
          break;
        }
        lexer.expect(TType::Comma).unwrap();
      }
    }
    lexer.expect(TType::CloseParen).unwrap();
    block := self.parse_block(lexer);

    return self.new_node(.{
      tag: NodeTag::Function,
      function: .{
        name: name,
        parameters: parameters,
        block: block,
      }
    });
  }

  parse_statement :: fn(*mut self, lexer: *mut Lexer) -> *mut Node {
    token := lexer.peek();
    switch token.type {
      TType::Var: {
        return self.parse_variable(lexer);
      }
      TType::If: {
        return self.parse_if(lexer);
      }
      TType::While: {
        return self.parse_while(lexer);
      }
      TType::For: {
        return self.parse_for(lexer);
      }

      TType::Fn: {
        return self.parse_function(lexer);
      }
      TType::Return: {
        lexer.eat();
        mut expression: Option!<*mut Node> = None();
        if lexer.peek().type != TType::Semi {
          expression = Some(self.parse_expression(lexer));
        }
        lexer.expect(TType::Semi).unwrap();
        return self.new_node(.{
          tag: NodeTag::Return,
          return_node: .{
          expression: expression,
          }
        });
      }
      TType::Continue: {
        lexer.eat();
        lexer.expect(TType::Semi).unwrap();
        return self.new_node(.{
          tag: NodeTag::Continue,
        });
      }
      TType::Break: {
        lexer.eat();
        lexer.expect(TType::Semi).unwrap();
        return self.new_node(.{
          tag: NodeTag::Break,
        });
      }
      else: {
        node := self.parse_expression(lexer);
        lexer.expect(TType::Semi).unwrap();
        return node;
      }
    }
    panic("invalid statement");
    return null;
  }

  parse :: fn(*mut self, lexer: *mut Lexer) -> List!<*mut Node> {
    mut nodes: List!<*mut Node>;
    while {
      token := lexer.peek();
      if token.type == TType::Eof then break;
      nodes.push(self.parse_statement(lexer));
    }
    return nodes;
  }
}
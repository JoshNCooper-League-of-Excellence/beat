import fmt::*;
import lexer::*;
import rc::*;
import map::Map;

enum Precedence {
  Lowest,
  Assignment,  // =
  Conditional, // ?:
  LogicalOr,   // ||
  LogicalAnd,  // &&
  BitwiseOr,   // |
  BitwiseXor,  // ^
  BitwiseAnd,  // &
  Equality,    // == !=
  Relational,  // < > <= >=
  Shift,       // << >>
  Additive,    // + -
  Multiplicative, // * / %
  Unary,       // ! - + ++ --
  Postfix,     // [] . () -> ++ --
  Highest
}

impl Precedence {
  fn get(type: TType) -> Self {
    if type == TType::Assign {
      return Precedence::Assignment;
    } else if type == TType::LT || type == TType::LTE || type == TType::GT || type == TType::GTE {
      return Precedence::Relational;
    } else if type == TType::EQ || type == TType::NEQ {
      return Precedence::Equality;
    } else if type == TType::Add || type == TType::Sub {
      return Precedence::Additive;
    } else if type == TType::Mul || type == TType::Div {
      return Precedence::Multiplicative;
    } else if type == TType::Not {
      return Precedence::Unary;
    } else if type == TType::Dot {
      return Precedence::Postfix;
    } else {
      return Precedence::Lowest;
    }
  }
}

enum ValueTag {
  Invalid,
  None,
  Number,
  String,
  Boolean,
  Object,
  Array,
  Function,
  NativeFunction,
}

struct Value;
alias NativeFunction :: fn*(List!<Rc!<Value>>) -> Rc!<Value>;

struct Value {
  tag: ValueTag,
  #anon :: union {
    number: f64,
    string: String,
    boolean: bool,
    object: Map!<String, Rc!<Value>>,
    array:  List!<Rc!<Value>>,
    function: *mut Function,
    native_function: NativeFunction,
  }
}

impl Value {
  fn None() -> Rc!<Self> {
    #static mut none: Rc!<Self>;
    if none.ptr == null {
      none = Rc!<Value>::new(Value.{});
    }
    return none;
  }

  fn True() -> Rc!<Self> {
    return Rc!<Value>::new(Value.{
      tag: ValueTag::Boolean,
      boolean: true,
    });
  }

  fn False() -> Rc!<Self> {
    return Rc!<Value>::new(Value.{
      tag: ValueTag::Boolean,
      boolean: false,
    });
  }

  fn Bool(value: bool) -> Rc!<Self> {
    return Rc!<Value>::new(Value.{
      tag: ValueTag::Boolean,
      boolean: value,
    });
  }

  fn Number(value: f64) -> Rc!<Self> {
    return Rc!<Value>::new(Value.{
      tag: ValueTag::Number,
      number: value,
    });
  }

  fn is_truthy(self) -> bool {
    return switch self.tag {
      ValueTag::None => false,
      ValueTag::Number => self.number != 0.0,
      ValueTag::String => self.string.length != 0,
      ValueTag::Boolean => self.boolean,
      ValueTag::Object => self.object.length != 0,
      ValueTag::Array => self.array.length != 0,
      ValueTag::Function => true,
      ValueTag::NativeFunction => true,
    };
  }


  fn clone(self) -> Rc!<Self> {
    mut value := Value.{
      tag: self.tag,
    };
    switch self.tag {
      ValueTag::Number: {
        value.number = self.number;
      }
      ValueTag::String: {
        value.string = self.string.clone();
      }
      ValueTag::Boolean: {
        value.boolean = self.boolean;
      }
      ValueTag::Object: {
        value.object = .{};
        for k, v in self.object {
          value.object.insert(k.clone(), v.clone());
        }
      }
      ValueTag::Array: {
        value.array = self.array.clone();
      }
      ValueTag::Function: {
        value.function = self.function;
      }
      ValueTag::NativeFunction: {
        value.native_function = self.native_function;
      }
    }
    return Rc!<Value>::new(value);
  }
}

struct Scope {
  parent: Option!<*mut Scope>,
  symbols: Map!<String, Rc!<Value>>,
}

impl Scope {
  fn insert(*mut self, key: String, value: Rc!<Value>) {
    mut node := self;
    while {
      option := node.symbols.get_mut(key);
      if option.is_some() {
        *option.unwrap() = value.clone();
        return;
      }
      if node.parent.is_none() {
        break;
      }
      node = node.parent.unwrap();
    }
    self.symbols.insert(key, value.clone());
  }
  fn lookup(*const self, key: String) -> Option!<Rc!<Value>> {
    mut option := self.symbols.get(key);
    if option.is_none() && self.parent.is_some() {
      return self.parent.unwrap().lookup(key);
    }

    if option.is_some() {
      v := option.unwrap();
      option = Some(v.clone());
    }
    return option;
  }
  fn create_child(*mut self) -> *mut Scope {
    return get_default_allocator().new_ptr(Scope.{
      parent: Some(self),
    });
  }
}

struct Node;

struct Unary {
  operand: *mut Node,
  operator: TType,
}

struct Binary {
  left: *mut Node,
  right: *mut Node,
  operator: TType,
}

struct MemberAccess {
  base: *mut Node,
  member: String,
}

struct Subscript {
  base: *mut Node,
  index: *mut Node,
}

struct Call {
  callee: *mut Node,
  arguments: List!<*mut Node>
}

struct ObjectLiteral {
  key_values: Map!<String, *mut Node>,
}

struct ArrayLiteral {
  values: List!<*mut Node>,
}

struct Block {
  statements: List!<*mut Node>,
}

struct Function {
  name: String,
  parameters: List!<String>,
  block: *mut Node,
}

struct Lambda {
  parameters: List!<String>,
  block: *mut Node,
}

struct If {
  condition: *mut Node,
  block: *mut Node,
  else_node: Option!<*mut Node>,
}

struct Else {
  if_node: Option!<*mut Node>,
  block: Option!<*mut Node>,
}

struct While {
  condition: Option!<*mut Node>,
  block: *mut Node,
}

struct For {
  target: *mut Node,
  identifier: String,
  block: *mut Node,
}

struct Return {
  expression: Option!<*mut Node>
}

struct Variable {
  name: String,
  value: Option!<*mut Node>,
}

enum NodeTag {
  None, // 'none' value, not an invalid ntag.
  Boolean,
  Number,
  String,
  Identifier,
  Binary,
  Unary,
  MemberAccess,
  Subscript,

  ObjectLiteral,
  ArrayLiteral,

  Block,
  Function,

  If,
  Else,
  While,
  For,

  Return,
  Continue,
  Break,

  Variable,
  Call,
  Lambda,
}

struct Node {
  tag: NodeTag,
  location: SourceLocation,
  #anon :: union {
    boolean: bool,
    number: f64,
    string: String,
    identifier: String,
    binary: Binary,
    unary: Unary,

    object_literal: ObjectLiteral,
    array_literal: ArrayLiteral,

    function: Function,
    lambda: Lambda,
    block: Block,

    if_node: If,
    else_node: Else,
    for_node: For,
    while_node: While,

    return_node: Return,

    call: Call,
    member_access: MemberAccess,
    variable: Variable,
    subscript: Subscript,
  },
}

impl Format for Value {
  fn format(*const self, builder: *mut StringBuilder, options: FormatOptions) {
    switch self.tag {
      ValueTag::None: {
        builder.append("none");
      }
      ValueTag::Number: {
        builder.appendf("%", (self.number,), options);
      }
      ValueTag::String: {
        builder.appendf("%", (self.string,), options);
      }
      ValueTag::Boolean: {
        builder.appendf("%", (self.boolean,), options);
      }
      ValueTag::Object: {
        builder.append("{ ");
        if options.indented {
          builder.append("\n  ");
        }
        mut index := 0;
        for key, value in self.object {
          builder.appendf("\"%\": ", (key,), options);
          (*value).format(builder, options);
          if options.indented && index != self.object.length - 1 {
            builder.append(",\n  ");
          } else if index != self.object.length - 1 {
            builder.append(", ");
          }
          index++;
        }
        if options.indented {
          builder.append("\n");
        }
        builder.append(" }");
      }
      ValueTag::Array: {
        builder.append("[");
        if options.indented then builder.append("\n  ");
        
        mut index := 0;
        for value in self.array {
          (*value).format(builder, options);;
          if options.indented && index != self.array.length - 1 {
            builder.append(",\n  ");
          } else if index != self.array.length - 1 {
            builder.append(", ");
          }
          index++;
        }
        if options.indented then builder.append("\n");
        builder.append("]");
      }
      ValueTag::Function: {
        builder.append("fn(");
        mut index := 0;
        for param in self.function.parameters {
          if index != self.function.parameters.length - 1 {
            builder.appendf("%, ", (param,), options);
          } else {
            builder.appendf("%", (param,), options);
          }
        }
        builder.append(")");
      }
      ValueTag::NativeFunction: {
        builder.append("@fn builtin()");
      }
    }
  }
}

impl Rc!<Value> {
  fn eq(self, other: Rc!<Value>) -> Rc!<Value> {
    if self.ptr.tag != other.ptr.tag {
      return Value::False();
    } 

    switch self.ptr.tag {
      ValueTag::None => Value::True(),
      ValueTag::Number => Value::Bool(self.ptr.number == other.ptr.number),
      ValueTag::String => Value::Bool(self.ptr.string == other.ptr.string),
      ValueTag::Boolean => Value::Bool(self.ptr.boolean == other.ptr.boolean),
      ValueTag::Object: {
        return Value::Bool(self.ptr == other.ptr);
        // if self.ptr.object.length != other.ptr.object.length {
        //   return Value::False();
        // } else {
        //   for key, value in self.ptr.object {
        //     if !other.ptr.object.contains(key) {
        //       return Value::False();
        //     }
        //     other_value := other.ptr.object.get(key).unwrap();
        //     if !value.eq(other_value).ptr.boolean {
        //       return Value::False();
        //     }
        //   }
        //   return Value::True();
        // }
      }
      ValueTag::Array: {
        if self.ptr.array.length != other.ptr.array.length {
          return Value::False();
        } else {
          for i in 0..self.ptr.array.length {
            if !self.ptr.array[i].eq(other.ptr.array[i]).ptr.boolean {
              return Value::False();
            }
          }
          return Value::True();
        }
      }
      ValueTag::Function => Value::Bool(self.ptr.function == other.ptr.function),
      ValueTag::NativeFunction => Value::Bool(self.ptr.native_function == other.ptr.native_function),
    }
    return Value::False();
  }
  fn neq(self, other: Rc!<Value>) -> Rc!<Value> {
    return Value::Bool(!self.eq(other).ptr.boolean);
  }
}

impl Rc!<Value> {
  fn add(self, other: Rc!<Value>) -> Rc!<Value> {
    if self.ptr.tag == ValueTag::Number && other.ptr.tag == ValueTag::Number {
      return Rc!<Value>::new(Value.{
        tag: ValueTag::Number,
        number: self.ptr.number + other.ptr.number,
      });
    } else if self.ptr.tag == ValueTag::String {
      mut builder: StringBuilder;
      builder.append(self.ptr.string);
      other.ptr.format(&mut builder, FormatOptions::default());
      string := builder.get_string();
      builder.deinit();
      return Rc!<Value>::new(Value.{
        tag: ValueTag::String,
        string: string,
      });
    } else if self.ptr.tag == ValueTag::Array {
      mut new_array := self.ptr.array.clone();
      new_array.push(other);
      return Rc!<Value>::new(Value.{
        tag: ValueTag::Array,
        array: new_array,
      });
    } else {
      panic("addition is not supported for these types");
      return Value::None();
    }
  }

  fn sub(self, other: Rc!<Value>) -> Rc!<Value> {
    if self.ptr.tag == ValueTag::Number && other.ptr.tag == ValueTag::Number {
      return Rc!<Value>::new(Value.{
        tag: ValueTag::Number,
        number: self.ptr.number - other.ptr.number,
      });
    } else {
      panic("subtraction is only supported for numbers");
      return Value::None();
    }
  }

  fn mul(self, other: Rc!<Value>) -> Rc!<Value> {
    if self.ptr.tag == ValueTag::Number && other.ptr.tag == ValueTag::Number {
      return Rc!<Value>::new(Value.{
        tag: ValueTag::Number,
        number: self.ptr.number * other.ptr.number,
      });
    } else {
      panic("multiplication is only supported for numbers");
      return Value::None();
    }
  }

  fn div(self, other: Rc!<Value>) -> Rc!<Value> {
    if self.ptr.tag == ValueTag::Number && other.ptr.tag == ValueTag::Number {
      if other.ptr.number == 0.0 {
        panic("division by zero");
        return Value::None();
      }
      return Rc!<Value>::new(Value.{
        tag: ValueTag::Number,
        number: self.ptr.number / other.ptr.number,
      });
    } else {
      panic("division is only supported for numbers");
      return Value::None();
    }
  }

  fn lt(self, other: Rc!<Value>) -> Rc!<Value> {
    if self.ptr.tag == ValueTag::Number && other.ptr.tag == ValueTag::Number {
      return Rc!<Value>::new(Value.{
        tag: ValueTag::Boolean,
        boolean: self.ptr.number < other.ptr.number,
      });
    } else {
      panic("less than comparison is only supported for numbers");
      return Value::None();
    }
  }

  fn lte(self, other: Rc!<Value>) -> Rc!<Value> {
    if self.ptr.tag == ValueTag::Number && other.ptr.tag == ValueTag::Number {
      return Rc!<Value>::new(Value.{
        tag: ValueTag::Boolean,
        boolean: self.ptr.number <= other.ptr.number,
      });
    } else {
      panic("less than or equal comparison is only supported for numbers");
      return Value::None();
    }
  }

  fn gt(self, other: Rc!<Value>) -> Rc!<Value> {
    if self.ptr.tag == ValueTag::Number && other.ptr.tag == ValueTag::Number {
      return Rc!<Value>::new(Value.{
        tag: ValueTag::Boolean,
        boolean: self.ptr.number > other.ptr.number,
      });
    } else {
      panic("greater than comparison is only supported for numbers");
      return Value::None();
    }
  }

  fn gte(self, other: Rc!<Value>) -> Rc!<Value> {
    if self.ptr.tag == ValueTag::Number && other.ptr.tag == ValueTag::Number {
      return Rc!<Value>::new(Value.{
        tag: ValueTag::Boolean,
        boolean: self.ptr.number >= other.ptr.number,
      });
    } else {
      panic("greater than or equal comparison is only supported for numbers");
      return Value::None();
    }
  }
}
Rc :: struct!<T> {
  ptr: *mut T,
  rc: *mut u64,
  allocator: *mut Dyn_Allocator,
}

impl!<T> Rc!<T> {
  // this hack to aleviate annoyances.
  deinit :: fn(*const self) {
    mut_self := self as *mut #self;
    *mut_self.rc -= 1;
    if *mut_self.rc <= 0 {
      mut_self.allocator.free(mut_self.ptr);
      mut_self.allocator.free(mut_self.rc);
    }
  }
}

impl!<T> Rc!<T> {
  clone :: fn(*const self) -> #self {
    mut_self := self as *mut #self;
    *mut_self.rc += 1;
    return .{
      ptr: mut_self.ptr,
      rc: mut_self.rc,
      allocator: mut_self.allocator,
    }
  }
}

impl!<T> Rc!<T> {
  new :: fn(value: T) -> #self {
    allocator := get_default_allocator();
    return .{
      ptr:  allocator.new_ptr(value),
      rc:   allocator.new_ptr(1 as u64),
      allocator: allocator,
    }
  }

  empty :: fn() -> #self {
    return .{
      ptr: null,
      rc:  null,
    };
  }

  /* 
    it seems weird, but we just pass the pointer out,
    the one we want dereference.
    this allows the compiler to dereference it, and this allows us
    to assign via this pointer, instead of always just getting a value.
  */
  deref :: fn(self) -> *mut T {
    return self.ptr;
  }
}

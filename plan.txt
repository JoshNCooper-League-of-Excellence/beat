Today's plan: make a tiny interpreter for a shell like language.
basic idea of each command:

# declaring variables {
  input  :: 'var some_local = 'Some Value''
  effect :: scope: [{'VAR', 'Some Value'}]
}

# for loop {
  input  :: '
    for index in 0..100 {
      continue; // or
      break;    // or
      return;
    }
  '
  effect :: loop 100 times, 0 to 99.
}

# while loop {
  input  :: '
    while ((some condition)) {
      break
    }
  '
  effect :: loop until broken.
}

# if statement {
  input  :: '
    if true {
      return 10;
    } else if false {
      return 20;
    } else {
      return 90;
    }
  '
  effect :: execute code based on conditions.
}

# function {
  effect :: create a function. come on! you know what that is.
  input :: '
    fn get_zero() {
      return 0;
    }
  '

  ((with parameters))
  input :: '
    fn clamp(a, b, v) {
      if v < a return a;
      if v > b return b;
      return v;
    }
  '
}

# arrays {
  input  :: '
    var array = [0, 1, 2];

    for value in array {
      print value;
    }

    array[0] = 1;
  '
}

tokens:

operators/punctuation:
  +  -  /  *  =  ! , ( ) { } [ ] ; < > <= >= != == .

keywords:
  if, return, fn, var,
  while, for, in

numbers: [0-9]

identifiers: [_a-z__A-Z_]

strings: \'|\"...\'|\"

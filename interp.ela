import parser::*;

struct Interp {
  scope: *mut Scope,
}

enum ControlFlow {
  None,
  Continue,
  Break,
  Return,
}

struct StatementResult {
  control_flow: ControlFlow,
  value: Option!<Rc!<Value>>,
}

impl Interp {
  fn enter_scope(*mut self) -> *mut Scope {
    old_scope := self.scope;
    mut scope := self.scope.create_child();
    self.scope = scope;
    return old_scope;
  }
  fn release_scope(*mut self, scope: *mut Scope) {
    for key, value in self.scope.symbols {
      key.deinit();
      value.deinit();
    }
    get_default_allocator().free(self.scope);
    self.scope = scope;
  }
}

impl Interp {
  fn visit_if(*mut self, node: *mut Node) -> StatementResult {
    condition := self.visit_expression(node.if_node.condition);
    if condition.ptr.is_truthy() {
      condition.deinit();
      return self.visit_block(node.if_node.block);
    } else if node.if_node.else_node.is_some() {
      condition.deinit();
      return self.visit_block(node.if_node.else_node.unwrap());
    }
    condition.deinit();
    return .{
      control_flow: ControlFlow::None,
      value: None(),
    };
  }

  fn visit_else(*mut self, node: *mut Node) -> StatementResult {
    if node.else_node.if_node.is_some() {
      return self.visit_if(node.else_node.if_node.unwrap());
    } else if node.else_node.block.is_some() {
      return self.visit_statement(node.else_node.block.unwrap());
    }
    return .{
      control_flow: ControlFlow::None,
      value: None(),
    };
  }

  fn visit_while(*mut self, node: *mut Node) -> StatementResult {
    while_node := &mut node.while_node;

    // TODO: this should be IN the while loop.
    old_scope := self.enter_scope();
    defer self.release_scope(old_scope);

    while {
      if while_node.condition.is_some() {
        condition := self.visit_expression(while_node.condition.unwrap());
        if !condition.ptr.is_truthy() {
          condition.deinit();
          break;
        }
        condition.deinit();
      }

      for statement in while_node.block.block.statements {
        result := self.visit_statement(statement);
        if result.control_flow == ControlFlow::Break {
          return .{
            control_flow: ControlFlow::None,
            value: None(),
          };
        } else if result.control_flow == ControlFlow::Continue {
          break;
        } else if result.control_flow == ControlFlow::Return {
          return result;
        }
      }
    }

    return .{
      control_flow: ControlFlow::None,
      value: None(),
    };
  }

  fn visit_for(*mut self, node: *mut Node) -> StatementResult {
    target := self.visit_expression(node.for_node.target);
    if target.ptr.tag != ValueTag::Array && target.ptr.tag != ValueTag::String {
      target.deinit();
      return .{};
    }

    identifier := node.for_node.identifier;
    defer target.deinit();

    old_scope := self.enter_scope();
    defer {
      self.release_scope(old_scope);
    }

    if target.ptr.tag == ValueTag::Array {
      for element in target.ptr.array {
        option := self.scope.symbols.get(identifier);
        if option.is_some() {
          *option.unwrap() = *element;
        } else {
          self.scope.symbols.insert(identifier, element.clone());
        }

        for statement in node.for_node.block.block.statements {
          result := self.visit_statement(statement);
          if result.control_flow == ControlFlow::Break {
            return .{
              control_flow: ControlFlow::None,
              value: None(),
            };
          } else if result.control_flow == ControlFlow::Continue {
            break;
          } else if result.control_flow == ControlFlow::Return {
            return result;
          }
        }
      }
    } else if target.ptr.tag == ValueTag::String {
      for ch in target.ptr.string {
        option := self.scope.symbols.get(identifier);

        mut data: u8[2];
        data[0] = ch;
        data[1] = '\0';

        string := String.{
          data: data,
          length: 1,
          capacity: 1,
        };

        value_string := Value.{
          tag: ValueTag::String,
          string: string,
        };

        if option.is_some() {
          *option.unwrap() =  value_string;
        } else {
          self.scope.symbols.insert(identifier, Rc!<Value>::new(value_string));
        }

        for statement in node.for_node.block.block.statements {
          result := self.visit_statement(statement);
          if result.control_flow == ControlFlow::Break {
            return .{
              control_flow: ControlFlow::None,
              value: None(),
            };
          } else if result.control_flow == ControlFlow::Continue {
            break;
          } else if result.control_flow == ControlFlow::Return {
            return result;
          }
        }
      }
    }

    return .{
      control_flow: ControlFlow::None,
      value: None(),
    };
  }

  fn visit_binary(*mut self, node: *mut Node) -> Rc!<Value> {
    left := self.visit_expression(node.binary.left);
    left.clone();
    right := self.visit_expression(node.binary.right);
    right.clone();
    result := switch node.binary.operator {
      TType::Add => left.add(right),
      TType::Sub => left.sub(right),
      TType::Mul => left.mul(right),
      TType::Div => left.div(right),
      TType::LT => left.lt(right),
      TType::LTE => left.lte(right),
      TType::GT => left.gt(right),
      TType::GTE => left.gte(right),
      TType::EQ => left.eq(right),
      TType::NEQ => left.neq(right),
      TType::Assign: {
        left.deinit();
        *left.ptr = *right;
        right.deinit();
      },
      else => Value::None(),
    };
    left.deinit();
    right.deinit();
    return result;
  }

  fn visit_unary(*mut self, node: *mut Node) -> Rc!<Value> {
    operand := self.visit_expression(node.unary.operand);
    result := switch node.unary.operator {
      TType::Not => Rc!<Value>::new(Value.{
        tag: ValueTag::Boolean,
        boolean: !operand.ptr.is_truthy(),
      }),
      TType::Sub: {
        if operand.ptr.tag != ValueTag::Number {
          operand.deinit();
          parse_error("unary minus can only be applied to numbers", node.location);
          return Value::None();
        }
        return Rc!<Value>::new(Value.{
          tag: ValueTag::Number,
          number: -operand.ptr.number,
        });
      },
      else => Value::None(),
    };
    operand.deinit();
    return result;
  }

  fn visit_call(*mut self, node: *mut Node) -> Rc!<Value> {
    function := self.visit_expression(node.call.callee);
    mut args: List!<Rc!<Value>>;
    for arg in node.call.arguments {
      value := self.visit_expression(arg);
      args.push(value);
    }

    defer function.deinit();

    result := switch function.ptr.tag {
      ValueTag::NativeFunction => function.ptr.native_function(args),
      ValueTag::Function => self.visit_function(function.ptr.function, args),
      else: {
        parse_error("cannot call a non function", node.location);
        return Value::None();
      },
    };
    return result;
  }

  fn visit_member_access(*mut self, node: *mut Node) -> Rc!<Value> {
    object := self.visit_expression(node.member_access.base);
    defer object.deinit();

    if object.ptr.tag != ValueTag::Object {
      parse_error("cannot access member of a non-object", node.location);
      return Value::None();
    }

    member := node.member_access.member;
    value := object.ptr.object.get(member);
    if value.is_none() {
      parse_error("member not found in object", node.location);
      return Value::None();
    }

    result := value.unwrap();
    return result;
  }

  fn visit_subscript(*mut self, node: *mut Node) -> Rc!<Value> {
    array := self.visit_expression(node.subscript.base);
    defer array.deinit();

    if array.ptr.tag != ValueTag::Array
      then return Value::None();

    index := self.visit_expression(node.subscript.index);

    defer index.deinit();

    if index.ptr.tag != ValueTag::Number 
      then return Value::None();

    idx := index.ptr.number as u64;
    if idx >= array.ptr.array.length 
      then return Value::None();

    return array.ptr.array[idx].clone();
  }

  fn visit_object_literal(*mut self, node: *mut Node) -> Rc!<Value> {
    mut object: Map!<String, Rc!<Value>>;

    for key, value_node in node.object_literal.key_values {
      value := self.visit_expression(value_node);
      object.insert(key, value);
    }

    return Rc!<Value>::new(Value.{
      tag: ValueTag::Object,
      object: object,
    });
  }

  fn visit_array_literal(*mut self, node: *mut Node) -> Rc!<Value> {
    mut array: List!<Rc!<Value>> = .{
      length: 0,
      capacity: 0,
      data: null,
      allocator: get_default_allocator()
    };

    for element_node in node.array_literal.values {
      value := self.visit_expression(element_node);
      array.push(value);
    }

    return Rc!<Value>::new(Value.{
      tag: ValueTag::Array,
      array: array,
    });
  }

  fn visit_block(*mut self, node: *mut Node) -> StatementResult {
    block := &mut node.block;

    old_scope := self.enter_scope();
    defer {
      self.release_scope(old_scope);
    }

    mut cf: ControlFlow = ControlFlow::None;

    for statement in node.block.statements {
      result := self.visit_statement(statement);
      if result.control_flow != ControlFlow::None {
        return result;
      }
    }


    return .{
      control_flow: ControlFlow::None,
      value: None(),
    };
  }

  fn visit_variable(*mut self, node: *mut Node) -> StatementResult {
    variable_name := node.variable.name;

    if node.variable.value.is_some() {
      initial_value := self.visit_expression(node.variable.value.unwrap());
      self.scope.insert(variable_name, initial_value);
    } else {
      self.scope.insert(variable_name, Value::None());
    }
    return .{
      control_flow: ControlFlow::None,
      value: None(),
    };
  }

  fn visit_function(*mut self, function: *mut Function, args: List!<Rc!<Value>>) -> Rc!<Value> {
    old_scope := self.enter_scope();

    defer {
      self.release_scope(old_scope);
    }

    mut i := 0;
    for param in function.parameters {
      if i >= args.length {
        break;
      }
      self.scope.symbols.insert(param, args[i].clone());
      i++;
    }

    _, value := self.visit_block(function.block);

    if value.is_none() {
      return Value::None();
    } else {
      return value.unwrap();
    }
  }

  fn visit_function_header(*mut self, node: *mut Node) {
    funcy := &mut node.function;
    self.scope.insert(funcy.name, Rc!<Value>::new(Value.{
      tag: ValueTag::Function,
      function: &mut node.function,
    }));
  }

  fn visit_expression(*mut self, node: *mut Node) -> Rc!<Value> {
    switch node.tag {
      NodeTag::Lambda: {
        function: *mut Function = get_default_allocator().new_ptr(Function.{});
        function.block = node.lambda.block;
        function.parameters = node.lambda.parameters;
        return Rc!<Value>::new(Value.{
          tag: ValueTag::Function,
          function: function,
        });
      }
      NodeTag::Boolean: {
        return Rc!<Value>::new(Value.{
          tag: ValueTag::Boolean,
          boolean: node.boolean,
        });
      }
      NodeTag::None: {
        return Rc!<Value>::new(Value.{
          tag: ValueTag::None,
        });
      }
      NodeTag::Number: {
        return Rc!<Value>::new(Value.{
          tag: ValueTag::Number,
          number: node.number,
        });
      }
      NodeTag::String: {
        return Rc!<Value>::new(Value.{
          tag: ValueTag::String,
          string: node.string,
        });
      }
      NodeTag::Identifier: {
        variable := self.scope.lookup(node.identifier);
        if variable.is_none() {
          return Value::None();
        }
        return variable.unwrap();
      }
      NodeTag::Binary: {
        return self.visit_binary(node);
      }
      NodeTag::Unary: {
        return self.visit_unary(node);
      }
      NodeTag::MemberAccess: {
        return self.visit_member_access(node);
      }
      NodeTag::Subscript: {
        return self.visit_subscript(node);
      }
      NodeTag::ObjectLiteral: {
        return self.visit_object_literal(node);
      }
      NodeTag::ArrayLiteral: {
        return self.visit_array_literal(node);
      }
      NodeTag::Call: {
        return self.visit_call(node);
      }
    }
    return Value::None();
  }

  fn visit_statement(*mut self, node: *mut Node) -> StatementResult {
    if node.tag == NodeTag::Boolean ||
       node.tag ==  NodeTag::Number ||
       node.tag ==  NodeTag::String ||
       node.tag ==  NodeTag::None ||
       node.tag ==  NodeTag::Identifier ||
       node.tag ==  NodeTag::Binary ||
       node.tag ==  NodeTag::Unary ||
       node.tag ==  NodeTag::MemberAccess ||
       node.tag ==  NodeTag::Subscript ||
       node.tag ==  NodeTag::ObjectLiteral ||
       node.tag ==  NodeTag::ArrayLiteral ||
       node.tag ==  NodeTag::Call {
        return .{
          control_flow: ControlFlow::None,
          value:  Some(self.visit_expression(node)),
        }
    }
    switch node.tag {
      NodeTag::Block: {
        return self.visit_block(node);
      }
      NodeTag::If: {
        return self.visit_if(node);
      }
      NodeTag::Else: {
        return self.visit_else(node);
      }
      NodeTag::While: {
        return self.visit_while(node);
      }
      NodeTag::For: {
        return self.visit_for(node);
      }
      NodeTag::Continue: {
        return .{
          control_flow: ControlFlow::Continue,
        };
      }
      NodeTag::Break: {
        return .{
          control_flow: ControlFlow::Break,
        };
      }
      NodeTag::Return: {
        mut value: Option!<Rc!<Value>>;

        if node.return_node.expression.is_some() {
          value = Some(self.visit_expression(node.return_node.expression.unwrap()));
        }

        return .{
          control_flow: ControlFlow::Return,
          value: value,
        };
      }
      NodeTag::Variable: {
        return self.visit_variable(node);
      }
    }
    parse_error("invalid node", node.location);
    return .{};
  }

  fn run(*mut self, root: *mut Node) {
    mut visited_nodes: List!<*mut Node>;
    
    for node in root.block.statements {
      if node.tag == NodeTag::Function {
        visited_nodes.push(node);
        self.visit_function_header(node);
      }
    }

    for node in root.block.statements {
      if visited_nodes.contains(node, fn(a: *mut Node, b: *mut Node) -> bool {
        return a == b;
      }) then continue;

      result := self.visit_statement(node);

      if result.control_flow != ControlFlow::None {
        return;
      }
    }
  }
}
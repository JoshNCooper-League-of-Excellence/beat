import fmt::{
  format,
  printlnf,
  FormatOptions,
};

import arena::Arena;

import map::Map;

import fs::File;

// line, column, filename,
alias SourceLocation :: (String, u32, u32);

impl SourceLocation {
  fn to_string(self) -> String {
    return format("%:%:%", self, FormatOptions::default());
  }
}

struct LexError {
  location: SourceLocation,
  message:  String,
}

impl LexError {
  fn print(self) {
    printlnf("error at %:%:%\n%", (self.location.0, self.location.1, self.location.2, self.message));
  }
}

enum TType {
  Eof,

  Add,
  Sub,
  Div,
  Mul,
  Assign,
  Not,
  Comma,
  
  OpenParen,
  CloseParen,
  
  OpenCurly,
  CloseCurly,

  OpenBracket,
  CloseBracket,

  Semi,

  LT,
  LTE,
  GT,
  GTE,
  EQ,
  NEQ,
  Dot,

  Number,
  String,
  Identifier,

  If,
  Else,
  For,
  In,
  While,
  
  Return,
  Continue,
  Break,
  
  Fn,
  Var,

  True,
  False,
  None,
}

struct Token {
  type: TType,
  value: Option!<String>,
  location: SourceLocation,
}

struct Lexer {
  input: String,
  location: SourceLocation,
  buffer: List!<Token>,
  position: u32,

  keywords: Map!<str, TType>,
  operators: Map!<str, TType>,
  
  allocator: *mut Dyn_Allocator,
}

impl Lexer {
  fn new(allocator: *mut Dyn_Allocator, path: String) -> Self {
    mut keywords: Map!<str, TType>;

    keywords.insert("none", TType::None);

    keywords.insert("if", TType::If);
    keywords.insert("else", TType::Else);

    keywords.insert("fn", Fn TType);
    
    keywords.insert("var", TType::Var);

    keywords.insert("while", TType::While);
    keywords.insert("for", TType::For);
    keywords.insert("in", TType::In);
    keywords.insert("return", TType::Return);
    keywords.insert("continue", TType::Continue);
    keywords.insert("break", TType::Break);

    keywords.insert("true", TType::True);
    keywords.insert("false", TType::False);

    mut operators: Map!<str, TType>;

    operators.insert("+", TType::Add);
    operators.insert("-", TType::Sub);
    operators.insert("*", TType::Mul);
    operators.insert("/", TType::Div);
    operators.insert("!", TType::Not);
    operators.insert(",", TType::Comma);
    operators.insert(".", TType::Dot);
    operators.insert("(", TType::OpenParen);
    operators.insert(")", TType::CloseParen);
    operators.insert("{", TType::OpenCurly);
    operators.insert("}", TType::CloseCurly);
    operators.insert("[", TType::OpenBracket);
    operators.insert("]", TType::CloseBracket);
    operators.insert(";", TType::Semi);
    operators.insert("<", TType::LT);
    operators.insert(">", TType::GT);
    operators.insert("<=", TType::LTE);
    operators.insert(">=", TType::GTE);
    operators.insert("==", TType::EQ);
    operators.insert("!=", TType::NEQ);

    return .{
      input: File::read_all(path.as_str()).unwrap(),
      location: (path, 0, 0),
      keywords: keywords,
      operators: operators,
      allocator: allocator,
    };
    
  }

  fn advance(*mut self, new_line: bool) {
    if new_line {
      self.location.1++;
      self.location.2 = 1;
    } else {
      self.location.2++;
    }
    self.position++;
  }

  fn get_next_char(*mut self, ch: *mut u8) {
    self.advance(false);
    *ch = self.input[self.position];
  }

  fn get_token(*mut self) -> Result!<Token, LexError> {
    alias Result :: Result!<Token, LexError>;
    mut token: Token;

    token.type = TType::Eof;
    token.location = self.location;

    while self.position < self.input.length {
      mut ch := self.input[self.position];

      if ch == '\n' {
        self.advance(true);
        token.location = self.location;
        continue;
      }

      if ch == ' ' || ch == '\t' {
        self.advance(false);
        token.location = self.location;
        continue;
      }

      if ch == '/' {
        self.get_next_char(&mut ch);
        if ch == '/' {
          while ch != '\n' && self.position < self.input.length {
            self.get_next_char(&mut ch);
          }
          continue;
        } else if ch == '*' {
          while self.position < self.input.length {
            self.get_next_char(&mut ch);
            if ch == '*' {
              self.get_next_char(&mut ch);
              if ch == '/' {
                break;
              }
            }
          }
          continue;
        } else {
          self.position--;
          ch = '/';
        }
      }

      if ch == '\'' || ch == '\"' {
        quote_char := ch;
        start := self.position;
        self.get_next_char(&mut ch);
        while ch != quote_char && self.position < self.input.length {
          self.get_next_char(&mut ch);
        }
        end := self.position;
        length := end - start - 1;

        token.value = Some(String.{
          data: self.allocator.copy(self.input.data + start + 1, sizeof(u8), length),
          length: length,
          capacity: length,
        });

        token.type = TType::String;
        self.advance(false);
        break;
      }

      if ch == '_' || isalpha(ch) {
        start := self.position;
        while ch == '_' || isalnum(ch) || ch == ':' {
          self.get_next_char(&mut ch);
        }
        end := self.position;

        length := end - start;

        token.value = Some(String.{
          data: self.allocator.copy(self.input.data + start, sizeof(u8), length),
          length: length,
          capacity: length,
        });

        token.type = TType::Identifier;

        mut value := token.value.unwrap();

        keyword := self.keywords.get(value.as_str());

        // TODO: we can deinit the string here, but we could just avoid allocating it all together.
        if keyword.is_some() {
          token.type = keyword.unwrap();
          token.value = None();
        }

        break;
      } else if isdigit(ch) {
        start := self.position;
        while isdigit(ch) || ch == '.' {
          self.get_next_char(&mut ch);
        }
        end := self.position;
        length := end - start;

        token.value = Some(String.{
          data:  self.allocator.copy(self.input.data + start, sizeof(u8), length),
          length: length,
          capacity: length,
        });

        token.type = TType::Number;
        break;
      } else {
        type := switch ch {
          '+' => TType::Add,
          '-' => TType::Sub,
          '/' => TType::Div,
          '*' => TType::Mul,
          '!' => TType::Not,
          ',' => TType::Comma,
          '.' => TType::Dot,
          '(' => TType::OpenParen,
          ')' => TType::CloseParen,
          '{' => TType::OpenCurly,
          '}' => TType::CloseCurly,
          '[' => TType::OpenBracket,
          ']' => TType::CloseBracket,
          ';' => TType::Semi,
          else => TType::Eof,
        };

        if type != TType::Eof {
          self.advance(false);
          token.type = type;
          break;
        }

        start := self.position;
        while ispunct(ch) {
          self.get_next_char(&mut ch);
        }

        end := self.position;
        length := end - start;

        mut value := String.{
          data:  self.allocator.copy(self.input.data + start, sizeof(u8), length),
          length: length,
          capacity: length,
        };

        token.type = switch value.as_str() {
          "<" => TType::LT,
          ">" => TType::GT,
          ">=" => TType::GTE,
          "<=" => TType::LTE,
          "==" => TType::EQ,
          "!=" => TType::NEQ,
        };

        value.deinit();

        break;
      }
    }

    return Result::Ok(token);
  }
}

impl Lexer {
  fn fill_buffer(*mut self) {
    while self.buffer.length < 8 {
      token := self.get_token();
      if token.is_err() {
        break;
      }
      self.buffer.push(token.unwrap());
    }
  }

  fn eat(*mut self) -> Token {
    if self.buffer.length == 0 {
      self.fill_buffer();
    }
    return self.buffer.pop_front();
  }

  fn peek(*mut self) -> Token {
    if self.buffer.length == 0 {
      self.fill_buffer();
    }
    return self.buffer[0];
  }

  fn expect(*mut self, expected: TType) -> Token {
    token := self.eat();

    if token.type != expected {
      error := LexError.{
        location: token.location,
        message: format("Expected token type: %, but got: %", (expected, token.type), FormatOptions::default()),
      };
      error.print();
      exit(1);
    }
    return token;
  }
}